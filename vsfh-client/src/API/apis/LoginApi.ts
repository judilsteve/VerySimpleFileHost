/* tslint:disable */
/* eslint-disable */
/**
 * VerySimpleFileHost
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptInviteDto,
    AuthConfigDto,
    AuthStatusDto,
    AuthenticationFailureDto,
    ChangePasswordAttemptDto,
    LoginAttemptDto,
} from '../models';

export interface ApiLoginAcceptInvitePostRequest {
    acceptInviteDto?: AcceptInviteDto;
}

export interface ApiLoginChangePasswordPutRequest {
    changePasswordAttemptDto?: ChangePasswordAttemptDto;
}

export interface ApiLoginLoginPostRequest {
    loginAttemptDto?: LoginAttemptDto;
}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI {

    /**
     */
    async apiLoginAcceptInvitePostRaw(requestParameters: ApiLoginAcceptInvitePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Login/AcceptInvite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.acceptInviteDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLoginAcceptInvitePost(requestParameters: ApiLoginAcceptInvitePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiLoginAcceptInvitePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLoginAuthConfigGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthConfigDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Login/AuthConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiLoginAuthConfigGet(initOverrides?: RequestInit): Promise<AuthConfigDto> {
        const response = await this.apiLoginAuthConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLoginAuthStatusGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<AuthStatusDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Login/AuthStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiLoginAuthStatusGet(initOverrides?: RequestInit): Promise<AuthStatusDto> {
        const response = await this.apiLoginAuthStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLoginChangePasswordPutRaw(requestParameters: ApiLoginChangePasswordPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Login/ChangePassword`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.changePasswordAttemptDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLoginChangePasswordPut(requestParameters: ApiLoginChangePasswordPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiLoginChangePasswordPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLoginLoginPostRaw(requestParameters: ApiLoginLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Login/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loginAttemptDto,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLoginLoginPost(requestParameters: ApiLoginLoginPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiLoginLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiLoginLogoutPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Login/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiLoginLogoutPost(initOverrides?: RequestInit): Promise<void> {
        await this.apiLoginLogoutPostRaw(initOverrides);
    }

}

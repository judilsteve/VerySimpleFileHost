/* tslint:disable */
/* eslint-disable */
/**
 * VerySimpleFileHost
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArchiveFormat,
    AuthenticationFailureDto,
    DirectoryDto,
} from '../models';

export interface ApiFilesDownloadGetRequest {
    path?: string;
    archiveFormat?: ArchiveFormat;
    asAttachment?: boolean;
}

export interface ApiFilesDownloadManyPostRequest {
    archiveFormat: ArchiveFormat;
    asAttachment?: boolean;
    requestBody?: Array<string>;
}

export interface ApiFilesListingGetRequest {
    path?: string;
    depth?: number;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     */
    async apiFilesDownloadGetRaw(requestParameters: ApiFilesDownloadGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.archiveFormat !== undefined) {
            queryParameters['archiveFormat'] = requestParameters.archiveFormat;
        }

        if (requestParameters.asAttachment !== undefined) {
            queryParameters['asAttachment'] = requestParameters.asAttachment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Files/Download`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiFilesDownloadGet(requestParameters: ApiFilesDownloadGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiFilesDownloadGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiFilesDownloadManyPostRaw(requestParameters: ApiFilesDownloadManyPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.archiveFormat === null || requestParameters.archiveFormat === undefined) {
            throw new runtime.RequiredError('archiveFormat','Required parameter requestParameters.archiveFormat was null or undefined when calling apiFilesDownloadManyPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.archiveFormat !== undefined) {
            queryParameters['archiveFormat'] = requestParameters.archiveFormat;
        }

        if (requestParameters.asAttachment !== undefined) {
            queryParameters['asAttachment'] = requestParameters.asAttachment;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Files/DownloadMany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiFilesDownloadManyPost(requestParameters: ApiFilesDownloadManyPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiFilesDownloadManyPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiFilesListingGetRaw(requestParameters: ApiFilesListingGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DirectoryDto>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Files/Listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiFilesListingGet(requestParameters: ApiFilesListingGetRequest, initOverrides?: RequestInit): Promise<DirectoryDto> {
        const response = await this.apiFilesListingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFilesPathSeparatorGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Files/PathSeparator`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiFilesPathSeparatorGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.apiFilesPathSeparatorGetRaw(initOverrides);
        return await response.value();
    }

}

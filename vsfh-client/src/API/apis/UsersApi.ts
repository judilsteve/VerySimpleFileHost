/* tslint:disable */
/* eslint-disable */
/**
 * VerySimpleFileHost
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserAddRequestDto,
    UserAddRequestDtoFromJSON,
    UserAddRequestDtoToJSON,
    UserEditDto,
    UserEditDtoFromJSON,
    UserEditDtoToJSON,
    UserListingDto,
    UserListingDtoFromJSON,
    UserListingDtoToJSON,
    UserResponseDto,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models';

export interface UsersPostRequest {
    userAddRequestDto?: UserAddRequestDto;
}

export interface UsersUserIdDeleteRequest {
    userId: string;
}

export interface UsersUserIdPutRequest {
    userId: string;
    userEditDto?: UserEditDto;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserListingDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserListingDtoFromJSON));
    }

    /**
     */
    async usersGet(initOverrides?: RequestInit): Promise<Array<UserListingDto>> {
        const response = await this.usersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAddRequestDtoToJSON(requestParameters.userAddRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit): Promise<UserResponseDto> {
        const response = await this.usersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserIdDeleteRaw(requestParameters: UsersUserIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersUserIdDelete(requestParameters: UsersUserIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUserIdPutRaw(requestParameters: UsersUserIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserEditDtoToJSON(requestParameters.userEditDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersUserIdPut(requestParameters: UsersUserIdPutRequest, initOverrides?: RequestInit): Promise<UserResponseDto> {
        const response = await this.usersUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * VerySimpleFileHost
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FileDto,
    FileDtoFromJSON,
    FileDtoFromJSONTyped,
    FileDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface DirectoryDto
 */
export interface DirectoryDto {
    /**
     * 
     * @type {string}
     * @memberof DirectoryDto
     */
    displayName?: string | null;
    /**
     * 
     * @type {Array<FileDto>}
     * @memberof DirectoryDto
     */
    files?: Array<FileDto> | null;
    /**
     * 
     * @type {Array<DirectoryDto>}
     * @memberof DirectoryDto
     */
    subdirectories?: Array<DirectoryDto> | null;
}

export function DirectoryDtoFromJSON(json: any): DirectoryDto {
    return DirectoryDtoFromJSONTyped(json, false);
}

export function DirectoryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DirectoryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'files': !exists(json, 'files') ? undefined : (json['files'] === null ? null : (json['files'] as Array<any>).map(FileDtoFromJSON)),
        'subdirectories': !exists(json, 'subdirectories') ? undefined : (json['subdirectories'] === null ? null : (json['subdirectories'] as Array<any>).map(DirectoryDtoFromJSON)),
    };
}

export function DirectoryDtoToJSON(value?: DirectoryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'files': value.files === undefined ? undefined : (value.files === null ? null : (value.files as Array<any>).map(FileDtoToJSON)),
        'subdirectories': value.subdirectories === undefined ? undefined : (value.subdirectories === null ? null : (value.subdirectories as Array<any>).map(DirectoryDtoToJSON)),
    };
}

